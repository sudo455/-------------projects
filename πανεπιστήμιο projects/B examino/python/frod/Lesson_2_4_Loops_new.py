'''
               Βρόχοι επανάληψης (while και for Loops)

Συχνά, ορισμένοι υπολογισμοί σε ένα πρόγραμμα είναι αναγκαίο να εκτελούνται
περισσότερες από μία φορές. Ένας βρόχος είναι μια ακολουθία εντολών οι οποίες δηλώνονται 
μία φορά, αλλά μπορούν να εκτελεστούν πολλές διαφορετικές φορές. 

Υπάρχουν δύο τύποι επαναλήψεων:

while Loops: Mη προκαθορισμένοι ή απροσδιόριστοι τύποι επαναλήψεων, όπου το πλήθος 
των επαναλήψεων καθορίζεται κατά τη διάρκεια της εκτέλεσης των εντολών του σώματος 
της επανάληψης.
    
For Loops: Προκαθορισμένοι τύποι επαναλήψεων, όπου το πλήθος των επαναλήψεων είναι 
δεδομένο πριν αρχίσουν οι επαναλήψεις.


                        1) while Loops
    
H επανάληψη while loop επαναλαμβάνεται για όλο το διάστημα που η λογική συνθήκη 
είναι αληθής. Για αυτό, θα πρέπει μέσα στο μπλοκ εντολών να υπάρχει κατάλληλη εντολή, 
ώστε να εξασφαλίζεται ότι κάποια στιγμή η συνθήκη θα γίνει ψευδής και θα
διακοπεί ο βρόχος. Διαφορετικά ο βρόχος δε θα τερματίζει.

Επίσης, πριν το βρόχο while θα πρέπει αρχικά να δώσουμε μία τιμή στη
μεταβλητή που ελέγχει τη συνθήκη του βρόχου, ώστε ανάλογα να εκτελεστεί ή
όχι ο βρόχος.
'''

count = 0
while count < 5:
    print(count)
    count += 1  # This is the same as count = count + 1


'''
Παράδειγμα δομής If μέσα στο  while Loop
'''
i = 0
while i < 5:
    i += 1
    if i == 2:
        print('Do something')
    print(i)


'''
Όταν η συνθήκη ανακύκλωσης της εντολής "while" δεν είναι αληθής, εκτελείται το 
τμήμα του κώδικα στο τμήμα "else"
'''
    
i = 1
while i <= 3:
    print(i)
    i += 1
else:
    print('Loop ended, i =', i)



'''
                        2) For Loops

Παραδείγματα χρήσης for Loop σε λίστες, tuples και συμβολοσειρές
'''

for x in [1,2,3,10,100]:   # το x παίρνει διαδοχικά τις τιμές της λιστας
    print(x)  
  
for let in 'John':   # το let παίρνει διαδοχικά τις τιμές της συμβολοσειράς
    print(let)  


for tup in (2, -3.6, 'John'):   # το tup παίρνει διαδοχικά τις τιμές της πλειάδας
    print(tup)            


# Παράδειγμα υπολογισμού του αθροίσματος των αριθμών από μία λίστα
lista = [12, 8, 7, 3]

s = 0

for num in lista:
	s = s + num
print(s)


'''
H επανάληψη 'for' χρησιμοποιείται συχνά με την εντολή range.
'''

for x in range(3, 8, 2):   # Αρχική τιμή 3, Τελική τιμή 8, Βήμα =2
    print(x)               # Εκτυπώνει τους αριθμούς 3,5,7

for x in range(3, 6):    
    print(x)            # Εκτυπώνει τους αριθμούς 3,4,5

for x in range(5):  
    print(x)            # Εκτυπώνει τους αριθμούς 0,1,2,3,4
 
for x in range(20, 5, -4):   # Αρχική τιμή 20, Τελική τιμή 5, Βήμα =-4
    print(x)                 # παράγει την ακολουθία [20, 16, 12, 8]

'''
Όταν ολοκληρωθούν οι επαναλήψεις στο τμήμα 'for', εκτελείται το 
τμήμα του κώδικα στο τμήμα "else"
'''

for x in range(5):
    print(x)
else:
    print("End of Loop")

'''
Παράδειγμα υπολογισμού με την εντολή for και τη χρήση του range:
'''

b, c = 2, -1
for a in range(1, 6):
    x = (-b + (b**2 - 4*a*c)) / (2*a)
    print(x)


'''
Αν θέλουμε να κρατήσουμε όλες τις τιμές σε λίστα x :
'''

b, c = 2, -1
x=[(-b + (b**2 - 4*a*c)) / (2*a) for a in range(1, 6)]

print(x)


x2 = [(-b + (b**2 - 4*a*c)) / (2*a) for a in range(1, 6) if a+1>3]
print(x2)

'''
Παραδείγματα χρήσης της εντολής break για να τερματήσουμε την ανακύκλωση πρόωρα
όταν εμφανιστεί για πρώτη φορά το γράμμα i στη λέξη string.
'''
for val in "string":
    if val == "i":
        break  # σταματαει την εκτέλεση της επαναληψης
    print(val)

print("The end")

# Παρατηρείστε ότι δεν εκτελείται το τμήμα του κώδικα στο τμήμα "else" όταν γίνεται break στο loop
for x in range(6):  
    if x == 3: 
        break
    print(x)
else:
    print("End of Loop") 
  
i = 0
while i <= 5:
    print(i)
    i += 1
    if i==3:
        break  
else:
    print("End of Loop")

'''
Παραδείγματα χρήσης της εντολής continue για να παραλείψουμε, προσωρινά, τις 
εντολές της ανακύκλωσης
'''

for i in range(20):
    if i%5!=0:
        continue         # δεν εκτελείται η επαναληψη και ο δείκτης παει 
    print(i)        #στο επόμενο στοιχειο της λιστας των αριθμών


i = 0
while i < 5:
    i += 1
    if i == 2:
        continue
    print(i)



'''
Η εντολή for μπορεί επίσης να χρησιμοποιηθεί για την εύκολη
προσπέλαση των χαρακτήρων μιας συμβολοσειράς:
    '''
s = 'programming'
print('The vowels in the word', s, 'are:')
for c in s:
    if c in 'aeiou':
        print(c)


'''
Αν υπάρχουν πεζά και κεφαλαία βρίσκουμε τα φωνήεντα:

'''

s = 'PrOgrammInG'
print('The vowels in the word', s, 'are:')
for c in s:
    if c in 'aeiou' or c in 'AEIOU':
        print(c)


#Nested Loops
  
letters = ['a', 'b', 'c']
numbers = [1,2,3,4]

for i in letters:
    for j in numbers:
        print(i, j) 

  
# Παράδειγμα μη εκτύπωσης ενός στοιχείου της λίστας

names = ["John", "Jim", "George", 'Jim']
for x in names:
    if x == "Jim":
        continue
    print(x)


# Παράδειγμα δημιουργίας νέας λίστας η οποία δεν περιέχει ένα στοιχείο της αρχικής λίστας

mylist = [20,20,60,80,20,11]
print(mylist)

new_list=[]

n=len(mylist)

for i in range(n):
    if mylist[i]==20:
        continue
    else:
        new_list.append(mylist[i])
             
print(new_list)


'''
Εφόσον θέλουε να πάρουμε ταυτόχρονα και τον αριθμό του δείκτη μίας ακολουθίας 
χρησιμοποιούμε την εντολή enumerate() :
'''

let_num = ['a', 'b', 'c', 12, 13, 14]
for i, n in enumerate(let_num):
		print(i, n)

s = 'word'

for ind, let in enumerate(s):
    print(ind,let)
